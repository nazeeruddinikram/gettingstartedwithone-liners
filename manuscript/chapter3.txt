# Perl

Perl is a high-level, general-purpose, interpreted, dynamic programming language.


###### Change, in each file-name, the string aaa by bbb

    ls | perl -ne 'chomp; next unless -e; $o = $_; s/aaa/bbb/; next if -e; rename $o, $_';

###### Add the first and last columns, in each line of the file named foo.txt, and print it out

    perl -lane 'print $F[0] + $F[-1]' foo.txt

###### Print lines 15 to 17 of file foo.txt

    perl -ne 'print if 15 .. 17' foo.txt

###### Another way to print lines 3 to 5 of file foo.txt

    perl -pe 'exit if 3<$. && $.<5' foo.txt

I> ##  Special note about `perl`
I> There are `many many` ways to do the same thing in `perl`, 
I> some are better than others, for `differing interpeerations of 
I> better` 


###### Change all instances of the word "foo" to "bar" in every `.sql` file, and make backups of the files 

    perl -p -i.bak -e 's/\bfoo\b/bar/g' *.sql

A handy tip to remember the syntax for the back up switches is : 

    eat the 'pie' : -p -i -e


###### The same as above, but without making a backup. 

    perl -p -i -e 's/foo/bar/g' *.sql


###### Changes all instances of the ^M newline characters to newlines

    perl  -p -i -e 's/\012?\015/\n/g'  $1


###### The same but with all files with name filename

    perl -p -i -e  's/foo/bar' `find . -name "filename"`

###### Substitution can also be applied to binary files like test.ppm

    perl -p -i -e 's/255/127/g' test.ppm

###### Substitute "xyz.math" to "abc.math" in every .html file and keep backups

    perl -p -i.bak -e 's/xyz\.math/abc\.math/g' *.html

###### Insert department name after each title and keep backup

    perl -p -i.bak -e 's#<title>#<title>Harvard .: #i' *.html

###### Delete first 10 lines in foo.txt and keep backup foo.txt.bak

    perl -i.bak -ne 'print unless 1 .. 10' foo.txt

###### Change isolated occurrence of aaa to bbb in each file *.c or *.h

    perl -p -i.bak -e 's{\baaa\b}{bbb}g' *.[ch]

###### Reverses lines of file foo.txt and print it

    perl -e 'print reverse <>' foo.txt

###### Find palindromes in a dictionary /usr/share/dict/words

    perl -lne 'print if $_ eq reverse' /usr/share/dict/words

###### Reverse paragraphs in the file foo.txt

    perl -00 -e 'print reverse <>' foo.txt

###### Increment all numbers in foo.txt by 2

    perl -pe 's/(\d+)/ 2 + $1 /ge' foo.txt

#### Reverse the order of characters in each line of foo.txt

    perl -nle 'print scalar reverse $_' foo.txt

###### Print the lines beween START and END in foo.txt to STDOUT

    perl -ne 'print if /^START$/ .. /^END$/' foo.txt

###### Delete the lines beween START and END, in the file foo.txt and make a backup of the original file

    perl -i.old -ne 'print unless /^START$/ .. /^END$/' foo.txt

###### Look for duplicated words in a line in the file foo.txt

    perl -0777 -ne 'print "$.: doubled $_\n" while /\b(\w+)\b\s+\b\1\b/gi' foo.txt

###### Start the perl debugger in "stand-alone" mode

    perl -d -e 42

###### Run the perl program named program.pl, with warnings enabled

    perl -w program.pl

###### Run the perl program, program.pl with debugger switched on

    perl -d program.pl

###### Run the perl program, program.pl, check it's syntax and also print warnings

    perl -wc program.pl
